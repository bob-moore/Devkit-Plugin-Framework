@use 'sass:math';

$breakpoints: (
    "phone"         : 544px,
    "tablet-small"  : 660px,
    "tablet"        : 768px,
    "tablet-wide"   : 1024px,
    "laptop"        : 1366px,
    "desktop"       : 1440px,
    "desktop-hd"    : 1920px
);

@mixin clearfix() {
    &:after, &:before {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@function str-replace($string, $search, $replace: '') {
	$index: str-index( $string, $search );

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function list-remove($list, $index) {
	$newList: ();
	@for $i from 1 through length($list) {
		@if $i != $index {
			$newList: append($newList, nth($list,$i), 'space');
		}
	}
	@return $newList;
}

@mixin media( $args... ) {

	$media-queries : '';

	@each $arg in $args {

		$found : false;

		@each $name, $value in $breakpoints {

			@if str-index( $arg, $name ) and str-index( $arg, $name + '-' ) == null {

				$found : true;

				@if str-index( $arg, 'max' ) {
					$value : $value - 1px;
				}

				$breakpoint : str-replace( $arg, $name, $value );

				$media-queries : append( $media-queries, $breakpoint, $separator : comma );
			}
		}

		@if $found == false {
			$media-queries : append( $media-queries, $arg, $separator : comma );
		}

	}

	$media-queries : list-remove( $media-queries, 1 );

	$query-string : '';

	@each $media-query in $media-queries {
		$query-string : $query-string + ' and (' + $media-query + ')'
	}

	@media only screen#{$query-string} {
		@content;
	}
}

@mixin invisible() {
    clip: rect(0px, 0px, 0px, 0px);
    -webkit-clip-path: rect( 0px 0px, 0px 0px, 0px 0px, 0px 0px);
    clip-path: rect( 0px 0px, 0px 0px, 0px 0px, 0px 0px);
    position: absolute !important;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
    font-size: 0;
    overflow: hidden;
}

/**
 * Strips the unit of a given input
 */
 @function strip-unit( $number )
 {
   @if type-of( $number ) == 'number' and not unitless( $number )
   {
	
	 @return  math.div( $number, $number * 0 + 1 );
   }
   @return  math.div( $number, $number * 0 + 1 );
//    @return $number;
 }

@mixin fluid-type( $min-value, $max-value, $min-vw : 30rem, $max-vw : 80rem )
{
	// $factor: 1 / ($max-vw - $min-vw) * ($max-value - $min-value);
	// $factor : ( 20rem - 2.5rem );
	$factor : math.div( 1, ( strip-unit( $max-vw ) - strip-unit( $min-vw ) ) * ( strip-unit( $max-value ) - strip-unit( $min-value ) ) );
	
	$calc-value: unquote( '#{ $min-value - ( $min-vw * $factor ) } + #{ 100vw * $factor }' );
	
	font-size: clamp(#{if($min-value > $max-value, $max-value, $min-value)}, #{$calc-value}, #{if($min-value > $max-value, $min-value, $max-value)});

	// $calc-value: unquote('#{ $min-value - ($min-vw * $factor) } + #{ 100vw * $factor }');

	// font-size: $min-value; // Fallback for older browsers
	// font-size: clamp(#{if($min-value > $max-value, $max-value, $min-value)}, #{$calc-value}, #{if($min-value > $max-value, $min-value, $max-value)});
}
// y = mx + b


$type-base-size: 1rem;

$type-ratios : (
  "minorSecond" : 1.067,
  "majorSecond" : 1.125,
  "minorThird" : 1.2,
  "majorThird" : 1.25,
  "perfectFourth" : 1.333,
  "augmentedFourth" : 1.414,
  "perfectFifth" : 1.5,
  "goldenRatio" : 1.618
);

@function clampSize( $min-size, $max-size, $min-breakpoint : 30rem, $max-breakpoint : 80rem )
{
	$slope : math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);

	$slope-to-unit : $slope * 100 * 1vw;

	$intercept : $min-size - $slope * $min-breakpoint;

	// @return calc( $slope-to-unit + $intercept );

	@return clamp($min-size, $slope-to-unit + $intercept, $max-size);
}

@function typeRatio( $min-size, $max-size, $min-breakpoint : 30rem, $max-breakpoint : 80rem )
{
	$slope : math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);

	$intercept : $min-size - $slope * $min-breakpoint;

	$slope-to-unit : $slope * 100 * 1vw;

	$intercept : $min-size - $slope * $min-breakpoint;

	// @return 1;

	@return calc( $slope-to-unit + $intercept );
}

/**
 * Generate Responsive Heading Sizes
 */
 @function typeScale( $level, $type-ratio : 'minorThird', $multiplier : 1 )
 {

	// @if $level == 0
	// {
	// 	@return $type-base-size; 
	// }

	$ratio : map-get( $type-ratios, $type-ratio );

	$slope : 1;

	@for $i from 1 through abs( $level )
	{
		$slope : $slope * $ratio;
	}

	@if $level < 1
	{ // Make positive
		@return math.div( ( $type-base-size * $multiplier ), $slope );
	}
	@else
	{
		@return $slope * ( $type-base-size * $multiplier );
	}
 }

 